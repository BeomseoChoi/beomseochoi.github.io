<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://beomseochoi.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://beomseochoi.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-25T23:30:31+00:00</updated><id>https://beomseochoi.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">순환 참조에 대한 걱정</title><link href="https://beomseochoi.github.io/blog/2025/CircularReference/" rel="alternate" type="text/html" title="순환 참조에 대한 걱정"/><published>2025-02-25T21:16:00+00:00</published><updated>2025-02-25T21:16:00+00:00</updated><id>https://beomseochoi.github.io/blog/2025/CircularReference</id><content type="html" xml:base="https://beomseochoi.github.io/blog/2025/CircularReference/"><![CDATA[<h2 id="순환-참조">순환 참조</h2> <p>프로그래밍하다보면 두 클래스가 서로를 참조하는 일이 발생하는데 이를 순환 참조라고 부른다. 순환 참조는 안티 패턴으로 잘 알려져 있다. A와 B가 서로를 참조한다고 할 때, A를 해제하기 위해 B를 해제해야 하고, B를 해제하기 위해 A를 해제해야 한다. 이러한 문제를 해결하기 위한 방법론을 마련해야 한다.</p> <p>참조 관계는 노드 간 연결로 추상화할 수 있다. A가 B에 의존하면 A→B로 표현할 수 있다. 참조 관계를 노드로 표현하면 하나의 자료구조가 된다. 그 자료구조가 그래프이며, cycle이 존재하면 순환 참조가 발생한다. 참조 관계 그래프에서 Cycle을 제거하면 순환 참조 문제를 근본적으로 해결할 수 있다. 참조 관계가 DAG 자료구조가 되도록 클래스를 디자인해야 순환 참조를 막을 수 있다.</p> <p>근본적인 해결 방법은 알았으나, cycle을 제거하면서 클래스를 디자인하는 게 현실적으로 가능한 작업인가를 고민해야한다. 두 클래스가 통신하는 경우는 매우 빈번하므로 현실적으로 근본적인 해결책은 불가능에 가깝다.</p> <h2 id="소유와-참조">소유와 참조</h2> <p>A와 B가 서로 의존할 때, 서로가 의미하는 ‘의존’이 다를 수 있다. 개념적으로 A는 B를 소유할 수도 있고, 참조할 수도 있다. 두 클래스가 서로의 포인터를 가지기는 하나, 한 클래스는 소유의 의미일 수 있으며, 다른 클래스는 참조의 의미일 수 있다.</p> <p>이 부분에서 용어를 정리할 필요가 있다. 아래 용어는 널리 쓰이는 표현은 아니고 이 포스트에서 사용할 표현이다.</p> <ul> <li>순환 의존 <ul> <li>A와 B가 서로의 포인터를 가지고 있는 상황</li> </ul> </li> <li>순환 소유 <ul> <li>A와 B가 소유 목적으로 순환 의존</li> </ul> </li> <li>순환 참조 <ul> <li>A와 B가 참조 목적으로 순환 의존</li> </ul> </li> </ul> <p>‘널리 알려진’ 순환 참조는 순환 의존을 의미한다.</p> <p>순환 의존은 메모리 해제 이슈를 만든다. 하지만 의존 목적을 생각하면 이 문제를 해결할 수 있다.</p> <ul> <li>A가 B를 소유하고, B는 A를 참조하는 경우 <ul> <li>A가 해제되면서 B를 해제한다.</li> <li>B는 A를 참조하고 있지만, 소유하지 않으므로 단순히 참조를 끊으면 된다.</li> <li>결과적으로, A가 해제되면서 B도 안전하게 해제된다.</li> </ul> </li> </ul> <p>하지만 A와 B가 서로를 소유하는 경우가 문제가 된다.</p> <ul> <li>A를 해제하면 B도 해제해야 하고, B를 해제하면 다시 A를 해제해야 한다.</li> <li>결과적으로 A와 B가 서로를 계속 해제하려는 무한 루프에 빠질 수 있으며, 메모리 이중 해제나 메모리 누수 등의 심각한 문제가 발생할 수 있다.</li> </ul> <p>순환 의존은 현실적으로 막을 수 없는 문제지만 순환 소유만은 막아야 한다. 순환 소유는 A와 B를 소유하는 C를 추가하고, A와 B를 순환 참조로 만들면 된다.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">A</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">B</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">C</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">A</span>
<span class="p">{</span>
    <span class="n">B</span><span class="o">*</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// 참조</span>
    <span class="n">C</span><span class="o">*</span> <span class="n">c</span><span class="p">;</span> <span class="c1">// 참조</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">B</span>
<span class="p">{</span>
    <span class="n">A</span><span class="o">*</span> <span class="n">a</span><span class="p">;</span> <span class="c1">// 참조</span>
    <span class="n">C</span><span class="o">*</span> <span class="n">c</span><span class="p">;</span> <span class="c1">// 참조</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">C</span>
<span class="p">{</span>
    <span class="n">A</span><span class="o">*</span> <span class="n">a</span><span class="p">;</span> <span class="c1">// 소유</span>
    <span class="n">B</span><span class="o">*</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// 소유</span>
<span class="p">}</span>
</code></pre></div></div> <p>가능한 순환 의존(참조-참조, 소유-참조, 소유-소유)을 지금까지 말한 방법으로 해결할 수 있다. 참조는 관계를 끊고, 소유는 해제하며, 서로 소유하면 Mediator를 추가하여 순환 참조로 만든다.</p> <p>C++은 메모리 해제를 자동으로 관리하기 위한 표준 라이브러리를 제공한다. Shared pointer는 그중 하나이며 reference counting으로 포인터를 관리한다. 그러나 reference counting 또한 순환 의존 문제가 발생한다. Reference count를 가지는 A와 B가 순환 의존하면 서로의 reference count가 1이 되어 둘 다 해제되지 못한다. 그래서 참조 목적 포인터 weak pointer를 제공하여 소유-참조 관계를 만듦으로써 위 문제를 해결할 수 있다.</p> <p>Reference counting에 대한 내용은 해당 포스트의 목적과 맞지 않아 언급하지 않는다. 또한 shared pointer와 weak pointer의 퍼포먼스 이슈도 언급하지 않는다.</p> <h2 id="결론">결론</h2> <p>순환 의존을 없애는 클래스 디자인은 현실적으로 어렵다. 그리고 순환 의존의 세 가지 케이스는 모두 해결 가능하다. 순환 의존을 최대한 없애되 불가피할 경우 소유와 참조 관계를 생각하며 클래스를 디자인해야 한다.</p>]]></content><author><name></name></author><category term="Develop"/><category term="formatting"/><category term="links"/><summary type="html"><![CDATA[순환 참조]]></summary></entry><entry><title type="html">CES 2024 Review</title><link href="https://beomseochoi.github.io/blog/2024/CES_2024_review/" rel="alternate" type="text/html" title="CES 2024 Review"/><published>2024-12-19T10:50:00+00:00</published><updated>2024-12-19T10:50:00+00:00</updated><id>https://beomseochoi.github.io/blog/2024/CES_2024_review</id><content type="html" xml:base="https://beomseochoi.github.io/blog/2024/CES_2024_review/"><![CDATA[<h2 id="ces2025가-다가올-때-작성하는-ces2024-후기">CES2025가 다가올 때 작성하는 CES2024 후기</h2> <p>어느덧 대규모 국제 박람회인 CES 2024(Consumer Electronics Show)를 다녀온지 1년이 지났다. 스마트폰 갤러리에서 1년 전 사진을 리마인드 해주는데 인천 국제공항으로 향하는 버스에서 촬영한 사진을 보여줬다. 또한 CES에 같이 참가한 형으로부터 연락이 왔다. 스마트폰 메모 앱을 켜니 그 기간동안 내가 느낀 감정을 적어놓은 기록이 있었다. 내 메일함에도 CES 2025 관련 메일이 왔다. 여러 곳에서 작년의 흔적이 보여 귀국하고 작성하려 했던 CES 2024 후기를 적어보고자 한다.</p> <p>베네시안 홀에서 exhibitor로 부스를 보조하는 활동을 했기 때문에 베네시안 홀을 주로 둘러봤다. 베네시안 홀은 스타트 업의 부스가 주로 위치하는 홀이다. 그래서 부스마다 규모는 작은 편이다. 나는 Computer Science 전공이고 AI에 관심이 있는 학생이었다. 학부 연구생때는 의료 데이터의 시계열 분석을 연구했지만 나는 컴퓨터 비전 분야를 공부하고자 했다. 그래서 박람회에서 CV 기술이 들어간 제품을 주로 보았다. Detection, 3D Reconstruction, Colorization같은 기술이 접목된 제품을 보았던 걸로 기억한다. 많은 제품들을 봤지만 솔직히 말하면 기대 이하였다. 나는 CES에서 혁신이라는 단어를 사용하기에 꽤나 큰 기대감을 가지고 있었다. 하지만 베네시안 홀에 전시된 제품들은 AI 기능이 접목됐을 뿐 혁신까지는 아니라는 생각이 들었다. 혁신상은 무슨 기준으로 주는건지 모르겠다. CES에서 말하는 혁신의 정의가 뭔지 모르겠다. 혁신이란 기존의 것을 아주 새롭게 바꾸는 걸 말한다. AI가 가파르게 발전하는 지금, AI가 들어가면 혁신인가? 기업의 name value가 높으면 주는 상인가? 세계 최고 박람회가 주는 상이니까 내 안목이 부족한 거라고 믿는다. 부스 몇 군데를 둘러보고 나서부터는 제품에 기대를 안하기 시작했다. 오히려 영어 사용에 초점을 두게 됐고 외국에서 운영하는 부스가 보이면 제품 좀 멀리서 지켜본 뒤 말을 걸었다.</p> <p>부스를 참관하면서 배우고 느낀게 없는 건 아니다. 여러 제품을 보면서 비즈니스적으로 접근하는 사고를 가지게 됐다. 이러한 생각은 시장성을 위해 고의로 비교적 낮은 수준의 기술을 사용하는 부스를 많이 봤기 때문이다. 나는 부스에 참관하기 전에 미리 조사를 했다. 그리고 이 부스에서 보여주는 제품이 어느 기술을 사용하는지 미리 추측했다. 하지만 내 예상과 다른 경우가 많았다. 특정 기술을 사용하지 않았는지에 대해 질문했을 때 들었던 대부분의 대답은 시장성과 관련이 있었다. 신기술이나 높은 수준의 기술이 반드시 시장성이 있는건 아니다. 생각해보면 그렇다. 컴퓨터 부품을 예시로 들면 엔트리 급, 미들 급, 하이엔드 급이 나뉘어져 있다. 하이엔드 제품을 만들 능력이 있는데 엔트리나 미들 급 제품을 왜 만드냐고 묻는다면 시장에서 수요가 있기 때문일거다. 이런 자연스러운 생각을 왜 의식하지 못했는지 부끄럽기도 하다. 그리고 나는 기술을 책과 논문으로만 배워왔다. 그러다보니 기술의 트렌드 정도는 파악하더라도, 사장된 기술인지 아직도 쓰이고 있는지 알 길이 없었다. ‘GPU의 모든 기술’이라는 책에서 HBM(High Bandwith Memory) 기술을 본 적이 있다. 그런데 이 기술이 CES 2024의 SK 하이닉스 부스에서 메인으로 보여지고 있었다. 기술을 공부할 때는 시장도 같이 봐야한다는걸 알게됐다.</p>]]></content><author><name></name></author><category term="CES"/><category term="formatting"/><category term="links"/><summary type="html"><![CDATA[CES2025가 다가올 때 작성하는 CES2024 후기]]></summary></entry><entry><title type="html">Working Holiday (2)</title><link href="https://beomseochoi.github.io/blog/2024/WorkingHolidy_2/" rel="alternate" type="text/html" title="Working Holiday (2)"/><published>2024-12-09T14:20:00+00:00</published><updated>2024-12-09T14:20:00+00:00</updated><id>https://beomseochoi.github.io/blog/2024/WorkingHolidy_2</id><content type="html" xml:base="https://beomseochoi.github.io/blog/2024/WorkingHolidy_2/"><![CDATA[<h2 id="타지에-간다는-것">타지에 간다는 것</h2> <p>나는 여행을 좋아하지 않는다. 워킹홀리데이 비자 신청을 앞두고, 여행을 좋아하지 않는데 호주에 가려는 이유는 무엇인지 생각해보았다. 나는 가끔 국내 여행을 생각하곤 한다. 그럴 때마다 가장 먼저 하는 행동은 ‘OO지역 가볼만한 곳’과 유사한 키워드로 검색한다. 검색 결과는 항상 맛집, 산책로, 공원같은 것들이다. 내가 거주하는 곳은 대전인데 대전에도 동일한 음식을 파는 곳이 있고, 산책로도 있고, 공원도 있다. 이 생각이 들면 인터넷을 끈다. 이 과정을 여행 생각이 날 때마다 반복한다. 그리고 한번도 가본 적 없다.</p> <p>여행을 좋아하지도 않는데 호주까지 가려는 이유는 무엇일까. 호주에 있는 음식, 산책로, 공원은 한국에도 있다. 많은 비용을 내고, 일과 숙소가 구해지지 않을 수도 있다는 불확실성을 감수하면서까지 호주에 가야할 이유가 있을까. 호주는 한국이랑 무엇이 다를까. 호주가 아니더라도 다른 나라는 한국이랑 다를게 있을까. 나는 이 의문에 ‘문화’가 다르다는 결론을 냈다.</p> <p>대전과 서울, 한국과 호주 둘 다 음식, 구경거리를 어느정도 공유한다. 하지만 대전에서 서울로 여행하는 건 관심없고, 한국에서 호주로 여행가는 건 관심있다. 내가 대전에서 서울로 놀러가는게 의미없다고 느끼는 이유는 두 지역의 문화가 같기 때문이다. 물론 지역마다 약간의 문화 차이는 있을 수 있다. 이는 문화를 지역 단위로 나눈 경우이다. 하지만 한국인인 나에게 그정도의 문화차이는 흥미를 일으키지 않는다. 국가 단위로 문화를 구분한다면 한국과 호주는 확실히 다른 문화를 가지고 있다. 언어, 사고 방식, 삶의 방식, 전통, 역사, 사회 등 한국과 호주의 문화는 충분히 다르다고 말할 수 있다.</p> <p>내가 호주에서 얻을 수 있는건 호주의 문화다. 이 문화에는 당연하게도 내 궁극적 목표인 언어 학습을 포함한다. 나는 내가 호주에서 한국으로 일찍 귀국하지 않았으면 좋겠다. 가능한 1년이라는 기간을 모두 경험하고 한국으로 돌아오는걸 희망한다. 나는 분명히 호주에서 일과 숙소를 구하고 안정적인 생활을 시작하게 되면 한 생각을 할거다. ‘생활이 똑같은데 호주에 왜 왔지?’라는 생각이 들 때 이 포스트를 떠올리고 읽었으면 좋겠다. 나는 생활을 바꾸려고 간게 아니라 문화를 배우려고 간다는 것을.</p>]]></content><author><name></name></author><category term="Working"/><category term="Holiday"/><category term="formatting"/><category term="links"/><summary type="html"><![CDATA[타지에 간다는 것]]></summary></entry><entry><title type="html">Working Holiday (1)</title><link href="https://beomseochoi.github.io/blog/2024/WorkingHolidy_1/" rel="alternate" type="text/html" title="Working Holiday (1)"/><published>2024-12-08T04:51:00+00:00</published><updated>2024-12-08T04:51:00+00:00</updated><id>https://beomseochoi.github.io/blog/2024/WorkingHolidy_1</id><content type="html" xml:base="https://beomseochoi.github.io/blog/2024/WorkingHolidy_1/"><![CDATA[<h2 id="워킹홀리데이-이유와-목표">워킹홀리데이, 이유와 목표</h2> <p>워킹홀리데이란 해외에서 아르바이트를 병행하며 휴식을 즐길 수 있는 프로그램이다. 나는 호주로 워킹홀리데이를 가려고 한다. 나는 사실 워킹홀리데이를 대학교 1학년 때부터 생각해왔다. 그런데 병역, 학업, 두려움, 자금 등을 핑계로 지금까지 미뤄왔다. 대학교를 졸업하고 인턴을 끝낸 이 시점에 다시 워킹홀리데이를 떠올리게 됐다. ‘지금이 아니면 정말로 갈 수 없겠구나’ 라는 생각이 들었고 이젠 정말로 떠나려고 한다.</p> <p>내가 워킹홀리데이에서 궁극적으로 얻고자 하는건 ‘영어’다. 나는 영어 실력이 별로다. 정량적으로 따지면 OPic Intermedate Mid 1이다. Reading, Listening은 토익 기준으로 각각 345, 435점이다. 총 점수는 둘을 더해서 780점이다. 사람마다 ‘영어 실력’의 기준이 다르겠지만, 이 글에서는 IELTs나 TOEFL같은 Reading, Listening, Writing, Speaking이 모두 포함된 시험을 기준으로 한다. 내가 목표하는 점수는 IELTs에서 each 6.5를 받는 거다. 내 마음 속 목표는 each 6.0이다. Each 6.0을 만족하기 위해서 피상적인 목표를 좀 더 높게 잡았다.</p> <p>워킹홀리데이를 가는 사람들 후기를 종합해보니 보통 영어, 돈, 경험 중 목표를 고른다. 나는 영어 이외의 목표는 그닥 관심이 없다. 굳이 고르자면 한국에 도착했을 때 생활에 지장이 없는 금액을 비축해두는 정도이다. 경험 부분은 솔직하게 무엇을 말하는지 모르겠다. 영어와 돈에 비해 상당히 추상적인 목표로 보인다. 내 목표는 두 가지로 정리할 수 있다. 첫 번째는 ‘IELTs each 6.5’이고 그 다음은 ‘한화 500만원 이상 비축’이다.</p> <h2 id="현실적인-문제">현실적인 문제</h2> <p>호주 워킹홀리데이를 준비하는데 가장 중요한건 영어와 돈이다. 영어는 자기가 열심히 하는 수밖에 없고, 준비 비용에 대해 얘기하고자 한다. 나는 호주 워킹홀리데이를 준비하는데 대략적으로 200만원이 소모될 것으로 잡았다. 금일 기준(2024년 12월 08일) 호주달러-원 환율은 1:910.88이다. 비자 신청에 635 aud (약 580,000원)가 든다. 그리고 삼육서울병원에서 호주 워킹홀리데이 신체검사를 받는데 191,000원이 든다. 대전에 거주하니까 대전-서울 왕복 비용으로 4만원을 잡는다. 비행기 편도 값은 45만원 정도가 나왔는데 대전-인천, 브리즈번-숙소 교통비 생각하면 50만원 잡으면 될 것 같다. 보험료는 마이뱅크로 30만원을 잡았다. 이정도 하면 대략 161만원이 소모된다. 숙소값 포함하면 대충 200이 든다.</p> <p>호주에 처음 도착해서 job을 구하기 까지 초기 자금이 필요하다. 나는 초기 자금 500만원을 들고 갈 예정이다. 호주 워킹홀리데이에 가는 한국인이 job을 구하는 방식은 두 가지로 나뉜다. 첫 번째는 오지 잡 (Aussi)이고 두 번째는 한인 잡이다. 오지잡은 호주인 사장 아래서, 한인잡은 한국인 사장 아래서 근무하는 걸 말한다. 나는 오지잡에 가려고 한다. 하지만 초기에는 수입이 없기 때문에 한인잡도 같이 구할거다. 호주라는 나라에 전재산 500만원을 들고 가는 나에겐 워킹홀리데이가 생존이 걸린 모험이기 때문에 오지잡, 한인잡을 가릴 처지가 아니다.</p> <p>또한 호주에서 숙소도 구해야한다. 나는 돈이 여유롭지 않아서 쉐어 하우스를 구할 계획이다. 검트리 기준으로 주 $200~250에 가격대가 형성돼있다. 그리고 2주치 보증금을 한번에 내야 하므로 약 $750이 한번에 사라진다고 생각해야한다. 백패커스는 매우 비싸기 때문에 최대한 빨리 숙소를 구해야한다. 호주 쉐어 하우스 가격을 보고 처음에는 비싸다 생각했다. 그런데 백패커스 가격 보니까 혜자다.</p> <p>백패커스 사이트 모음 : https://secret-rabbithole.tistory.com/4</p> <h2 id="해결방안">해결방안</h2> <p>비용 문제 해결 방법은 두 가지다. 첫 번째는 돈을 버는 것이고, 두 번째는 돈을 아끼는 것이다. 호주의 최저시급은 $24.01 이다. 주세가 $250이라면 11시간은 일해야 주세에서 손실이 없다. 나는 한국에서 자취를 했고 요리를 해먹기 때문에 외식을 적게 할 자신이 있다. 생활비는 주에 $200로 잡는다. 주세와 생활비 합은 $450으로, 최저시급으로 19시간 일하면 적자없이 살 수 있다. 여기서 여유를 좀 가지려면 주 25~30 시간정도는 일을 해야할 것 같다.</p>]]></content><author><name></name></author><category term="Working"/><category term="Holiday"/><category term="formatting"/><category term="links"/><summary type="html"><![CDATA[워킹홀리데이, 이유와 목표]]></summary></entry></feed>